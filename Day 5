1. Find all duplicates in array
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int>ans;
        int n=size(nums);
        for(int i=0;i<n;i++){
            int x=abs(nums[i]);
            if(nums[x-1]<0){
                
                ans.push_back(x);
            }
            nums[x-1]*=-1;
        }
        return ans;
    }
};
2.Best time to buy and sell stock
class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int profit = 0 ; 
       int mini=prices[0]; 
        for (int i = 1; i < prices.size(); i ++)
        {
        profit = max(profit,prices[i]-mini ); 
                
            mini = min(mini,prices[i]);
        }
        return profit; 
    }
};

3.Choclate distribution problem
class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int profit = 0 ; 
       int mini=prices[0]; 
        for (int i = 1; i < prices.size(); i ++)
        {
        profit = max(profit,prices[i]-mini ); 
                
            mini = min(mini,prices[i]);
        }
        return profit; 
    }
};

4. 2 Sum
class Solution {
public:

    vector<int> twoSum(vector<int>& nums, int target) {
         unordered_map<int, int> mp;
       
        for(int i = 0; i < nums.size(); i++){
            if(mp.find(target - nums[i]) == mp.end())
                mp[nums[i]] = i;
            else
                return {mp[target - nums[i]], i};
        }
 
        return {-1, -1};
    }
};

5.Best time to buy and sell stock 2
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for(int i = 0 ; i < prices.size()-1 ; i++)
        {
            if(prices[i] < prices[i+1])
            {
                profit += prices[i+1] - prices[i];
            }
        }
        return profit;
    }
};
